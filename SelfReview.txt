Design/Implementation Reflections

I didn’t receive any requests for design changes from my customers, so it’s challenging to
assess what could have been improved in our implementation. This could suggest our design
was either highly robust or that our customers didn’t have enough time to identify issues
due to requesting the code too close to the deadline.

One key lesson I learned from this experience is how differently others can approach the same
problem. For example, while our team represented the game board using two separate 2D arrays to
avoid a generalized 2D array of objects, our providers chose to use a single 2D array of objects.
This highlighted how design decisions can vary significantly based on priorities like simplicity
versus specificity.

Interaction with Providers

My experience with our providers was largely positive. They always responded within a reasonable
time and were respectful in their communication, making collaboration efficient and professional.
Their code was well-documented and mostly well-designed, making it straightforward to adapt to our
implementation.

One notable issue was their handling of the end-game state, which was implemented in the controller
rather than the model, violating the MVC design principle. However, apart from this, their design was
adaptable, reflecting a generally thoughtful approach to their implementation.

Overall, I appreciated the opportunity to see how other teams structured their code, which
offered valuable insights into alternative design patterns, their trade-offs, and the importance of
maintaining open and respectful communication in collaborative projects.